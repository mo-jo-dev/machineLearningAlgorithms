import numpy as np

# Load the dataset
def load_data(filepath):
    # Use np.genfromtxt to load data from CSV, skipping the header
    data = np.genfromtxt(filepath, delimiter=',', skip_header=1, dtype=float, missing_values='', filling_values=np.nan)
    return data

# Assuming the Titanic dataset is stored at 'titanic.csv'
data = load_data('Titanic-Dataset.csv')
def preprocess_data(data):
    # Select features (Pclass, Age, SibSp, Parch, Fare) and target (Survived)
    X = data[:, [2, 5, 6, 7, 9]]  # Assuming these columns correspond to the features
    y = data[:, 1]  # Assuming the second column is 'Survived'

    # Handle missing values by filling them with the mean of the column
    for i in range(X.shape[1]):
        col = X[:, i]
        mean_val = np.nanmean(col)
        col[np.isnan(col)] = mean_val
        X[:, i] = col

    # Normalize features
    X = (X - X.mean(axis=0)) / X.std(axis=0)

    return X, y

X, y = preprocess_data(data)

def entropy(y):
    unique_labels, counts = np.unique(y, return_counts=True)
    probabilities = counts / len(y)
    return -np.sum(probabilities * np.log2(probabilities))

def gini(y):
    unique_labels, counts = np.unique(y, return_counts=True)
    probabilities = counts / len(y)
    return 1 - np.sum(probabilities ** 2)

def split_dataset(X, y, feature_index, threshold):
    left_mask = X[:, feature_index] <= threshold
    right_mask = X[:, feature_index] > threshold
    return X[left_mask], X[right_mask], y[left_mask], y[right_mask]

def best_split(X, y):
    best_feature, best_threshold, best_gain = None, None, -np.inf
    base_impurity = gini(y)
    n_features = X.shape[1]

    for feature_index in range(n_features):
        thresholds = np.unique(X[:, feature_index])
        for threshold in thresholds:
            X_left, X_right, y_left, y_right = split_dataset(X, y, feature_index, threshold)
            if len(y_left) == 0 or len(y_right) == 0:
                continue

            left_impurity = gini(y_left)
            right_impurity = gini(y_right)
            weighted_impurity = (len(y_left) / len(y)) * left_impurity + (len(y_right) / len(y)) * right_impurity
            gain = base_impurity - weighted_impurity

            if gain > best_gain:
                best_gain = gain
                best_feature = feature_index
                best_threshold = threshold

    return best_feature, best_threshold

class DecisionTree:
    def __init__(self, max_depth=None, min_samples_split=2):
        self.max_depth = max_depth
        self.min_samples_split = min_samples_split
        self.tree = None

    def fit(self, X, y, depth=0):
        if len(np.unique(y)) == 1 or len(y) < self.min_samples_split or (self.max_depth and depth >= self.max_depth):
            return np.argmax(np.bincount(y.astype(int)))

        feature, threshold = best_split(X, y)
        if feature is None:
            return np.argmax(np.bincount(y.astype(int)))

        X_left, X_right, y_left, y_right = split_dataset(X, y, feature, threshold)
        if len(y_left) == 0 or len(y_right) == 0:
            return np.argmax(np.bincount(y.astype(int)))

        self.tree = {
            'feature': feature,
            'threshold': threshold,
            'left': self.fit(X_left, y_left, depth + 1),
            'right': self.fit(X_right, y_right, depth + 1)
        }
        return self.tree

    def predict(self, X):
        return np.array([self._predict_instance(x, self.tree) for x in X])

    def _predict_instance(self, x, tree):
        if isinstance(tree, dict):
            feature = tree['feature']
            threshold = tree['threshold']
            if x[feature] <= threshold:
                return self._predict_instance(x, tree['left'])
            else:
                return self._predict_instance(x, tree['right'])
        else:
            return tree

class RandomForest:
    def __init__(self, n_trees=10, max_depth=None, min_samples_split=2, max_features=None):
        self.n_trees = n_trees
        self.max_depth = max_depth
        self.min_samples_split = min_samples_split
        self.max_features = max_features
        self.trees = []

    def fit(self, X, y):
        n_samples, n_features = X.shape
        self.max_features = self.max_features or n_features
        for _ in range(self.n_trees):
            indices = np.random.choice(n_samples, n_samples, replace=True)
            subset_X, subset_y = X[indices], y[indices]
            tree = DecisionTree(max_depth=self.max_depth, min_samples_split=self.min_samples_split)
            tree.fit(subset_X, subset_y)
            self.trees.append(tree)

    def predict(self, X):
        tree_predictions = np.array([tree.predict(X) for tree in self.trees])
        return np.squeeze(np.apply_along_axis(lambda x: np.argmax(np.bincount(x.astype(int))), axis=0, arr=tree_predictions))

def train_test_split(X, y, test_size=0.2):
    n_samples = X.shape[0]
    indices = np.arange(n_samples)
    np.random.shuffle(indices)
    test_set_size = int(n_samples * test_size)
    test_indices = indices[:test_set_size]
    train_indices = indices[test_set_size:]
    return X[train_indices], X[test_indices], y[train_indices], y[test_indices]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

forest = RandomForest(n_trees=100, max_depth=10, min_samples_split=2, max_features=None)
forest.fit(X_train, y_train)

predictions = forest.predict(X_test)
accuracy = np.mean(predictions == y_test)
print(f'Accuracy: {accuracy * 100:.2f}%')

